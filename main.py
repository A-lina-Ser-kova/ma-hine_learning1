import streamlit as st
import pandas as pd
import numpy as np
import joblib
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üçè –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
    page_icon="üçé",
    layout="wide"
)

@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    try:
        model = joblib.load('Linear Regression.pkl')
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

def prepare_input(input_data):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (–º–≥ -> –≥)
        input_data['calcium'] /= 1000
        input_data['irom'] /= 1000
        input_data['potassium'] /= 1000
        input_data['sodium'] /= 1000
        input_data['cholesterol'] /= 1000
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = pd.DataFrame([[
            input_data['protein'],
            input_data['fiber'],
            input_data['sugars'],
            input_data['fat'],
            input_data['carbohydrate'],
            input_data['calcium'],
            input_data['irom'],
            input_data['potassium'],
            input_data['sodium'],
            input_data['cholesterol']
        ]], columns=[
            'protein', 'fiber', 'sugars', 'fat', 'carbohydrate',
            'calcium', 'irom', 'potassium', 'sodium', 'cholesterol'
        ])
        
        return features
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def calculate_macros(protein, fat, carbs, calories):
    """–†–∞—Å—á–µ—Ç –≤–∫–ª–∞–¥–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤"""
    protein_cals = protein * 4
    fat_cals = fat * 9
    carb_cals = carbs * 4
    total = protein_cals + fat_cals + carb_cals
    
    if total > 0:
        return {
            '–ë–µ–ª–∫–∏': protein_cals,
            '–ñ–∏—Ä—ã': fat_cals,
            '–£–≥–ª–µ–≤–æ–¥—ã': carb_cals,
            '% –ë–µ–ª–∫–∏': protein_cals / total * 100,
            '% –ñ–∏—Ä—ã': fat_cals / total * 100,
            '% –£–≥–ª–µ–≤–æ–¥—ã': carb_cals / total * 100
        }
    return None

def main():
    st.title("üçè –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
    st.markdown("### –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
    
    model = load_model()
    if model is None:
        st.stop()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–≥ –Ω–∞ 100–≥ –ø—Ä–æ–¥—É–∫—Ç–∞)")
        protein = st.number_input("–ë–µ–ª–∫–∏", 0.0, 100.0, 10.0, 0.1)
        fat = st.number_input("–ñ–∏—Ä—ã", 0.0, 100.0, 5.0, 0.1)
        carbohydrate = st.number_input("–£–≥–ª–µ–≤–æ–¥—ã", 0.0, 100.0, 20.0, 0.1)
        fiber = st.number_input("–ö–ª–µ—Ç—á–∞—Ç–∫–∞", 0.0, 50.0, 2.0, 0.1)
        sugars = st.number_input("–°–∞—Ö–∞—Ä–∞", 0.0, 100.0, 5.0, 0.1)

    with col2:
        st.subheader("–ú–∏–Ω–µ—Ä–∞–ª—ã (–º–≥ –Ω–∞ 100–≥ –ø—Ä–æ–¥—É–∫—Ç–∞)")
        calcium = st.number_input("–ö–∞–ª—å—Ü–∏–π", 0, 2000, 50)
        iron = st.number_input("–ñ–µ–ª–µ–∑–æ", 0, 100, 2)
        potassium = st.number_input("–ö–∞–ª–∏–π", 0, 5000, 300)
        sodium = st.number_input("–ù–∞—Ç—Ä–∏–π", 0, 5000, 100)
        cholesterol = st.number_input("–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω", 0, 1000, 0)

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å", type="primary"):
        input_data = {
            'protein': protein,
            'fiber': fiber,
            'sugars': sugars,
            'fat': fat,
            'carbohydrate': carbohydrate,
            'calcium': calcium,
            'irom': iron,
            'potassium': potassium,
            'sodium': sodium,
            'cholesterol': cholesterol
        }

        features = prepare_input(input_data)
        
        if features is not None:
            try:
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                predicted_calories = max(0, round(model.predict(features)[0]))
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.success(f"## –†–∞—Å—á–µ—Ç–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {predicted_calories} –∫–∫–∞–ª/100–≥")
                
                # –†–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
                macros = calculate_macros(protein, fat, carbohydrate, predicted_calories)
                
                if macros:
                    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏")
                    cols = st.columns(3)
                    cols[0].metric("–ë–µ–ª–∫–∏", f"{macros['% –ë–µ–ª–∫–∏']:.1f}%")
                    cols[1].metric("–ñ–∏—Ä—ã", f"{macros['% –ñ–∏—Ä—ã']:.1f}%")
                    cols[2].metric("–£–≥–ª–µ–≤–æ–¥—ã", f"{macros['% –£–≥–ª–µ–≤–æ–¥—ã']:.1f}%")
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    chart_data = pd.DataFrame({
                        "–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã": ["–ë–µ–ª–∫–∏", "–ñ–∏—Ä—ã", "–£–≥–ª–µ–≤–æ–¥—ã"],
                        "–ö–∞–ª–æ—Ä–∏–∏": [macros['–ë–µ–ª–∫–∏'], macros['–ñ–∏—Ä—ã'], macros['–£–≥–ª–µ–≤–æ–¥—ã']]
                    })
                    st.bar_chart(chart_data, x="–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã", y="–ö–∞–ª–æ—Ä–∏–∏")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with st.expander("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                    st.write("""
                    - **–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ –≥—Ä–∞–º–º**:
                      - –ë–µ–ª–∫–∏: 4 –∫–∫–∞–ª/–≥
                      - –ñ–∏—Ä—ã: 9 –∫–∫–∞–ª/–≥
                      - –£–≥–ª–µ–≤–æ–¥—ã: 4 –∫–∫–∞–ª/–≥
                    """)
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")

if __name__ == "__main__":
    main()